name: Unity CI/CD

on:
  push:
    tags:
      - 'buildtest'
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ] # Trigger on pull requests to the main branch
  workflow_dispatch: # Allow manual triggering

jobs:
  build-windows: # Renamed job
    name: Build Unity Project (Windows) # Updated name
    runs-on: ubuntu-22.04-32core
    permissions:
      contents: write # Grant permission to create releases
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true # Required for Unity projects using Git LFS

      # Install 7-Zip
      - name: Install 7-Zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      # Cache
      - name: Cache Library folder
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Unity Builder
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          buildName: GemmaJourney # Name of the executable

      # Output Build Path
      - name: Get Build Output Path
        id: build_path
        run: echo "path=$(ls -d build/* | head -n 1)" >> $GITHUB_OUTPUT

      # Download Gemma Model from Kaggle (Moved After Build)
      - name: Download Gemma Model
        run: |
          echo "Installing Kaggle CLI..."
          pip install kaggle --upgrade
          echo "Configuring Kaggle credentials..."
          mkdir -p ~/.kaggle
          echo '{"username":"${{ secrets.KAGGLE_USERNAME }}","key":"${{ secrets.KAGGLE_KEY }}"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "Downloading Gemma model (gemma-3.tar.gz)..."
          # Use the correct command structure including version number /1
          kaggle models instances versions download google/gemma-3/gemmaCpp/3.0-4b-it-sfp/1 -p . --quiet
          if [ ! -f "gemma-3.tar.gz" ]; then
            echo "Error: Could not find downloaded model file gemma-3.tar.gz."
            exit 1
          fi
          echo "Model download complete."
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

      # Extract and Copy Gemma Model into Build Output using Sudo
      - name: Extract and Copy Gemma Model into Build Output
        run: |
          FINAL_TARGET_DIR="${{ steps.build_path.outputs.path }}/GemmaJourney_Data/StreamingAssets/gemma-3.0-4b"

          sudo mkdir -p "$FINAL_TARGET_DIR"

          echo "Extracting gemma-3.tar.gz into $FINAL_TARGET_DIR..."
          if [ -f "gemma-3.tar.gz" ]; then
            echo "Setting permissions on $FINAL_TARGET_DIR..."
            sudo chmod -R 755 "$FINAL_TARGET_DIR"
            sudo tar -xzf gemma-3.tar.gz -C "$FINAL_TARGET_DIR" # Added sudo here
            rm *.tar.gz # Keep rm as is, should have permission in current dir
            echo "Extraction complete."
            sudo chmod -R 755 "$FINAL_TARGET_DIR"
            echo "Changing ownership of $FINAL_TARGET_DIR..."
            sudo chown -R $(id -u):$(id -g) "$FINAL_TARGET_DIR" # Change ownership back to runner user
            echo "Ownership changed."
          else
            echo "Error: Could not find downloaded model file gemma-3.tar.gz for extraction."
            exit 1
          fi

          echo "Model successfully placed in build output."
        env:
          # Pass build path to env if needed, though direct usage should work
          BUILD_OUTPUT_PATH: ${{ steps.build_path.outputs.path }}

      # Create 7z Multi-Volume Archive
      - name: Create 7z Multi-Volume Archive
        run: |
          ARCHIVE_NAME="windows-build"
          BUILD_OUTPUT_DIR="${{ steps.build_path.outputs.path }}"

          echo "Archiving contents of: $BUILD_OUTPUT_DIR"
          echo "Files to be archived:"
          # List all files and directories that will be archived for debugging
          find "$BUILD_OUTPUT_DIR" -print
          
          echo "Changing to directory: $BUILD_OUTPUT_DIR"
          cd "$BUILD_OUTPUT_DIR"
          
          # Create the 7z archive from the contents of the current directory (.)
          # The archive will be created in the original GITHUB_WORKSPACE
          # So we use an absolute path for the archive name
          echo "Creating multi-volume 7z archive ${GITHUB_WORKSPACE}/${ARCHIVE_NAME}.7z ..."
          7z a -v1900m "${GITHUB_WORKSPACE}/${ARCHIVE_NAME}.7z" .
          
          echo "Archive creation complete."
          echo "Listing created archive parts in ${GITHUB_WORKSPACE}:"
          ls -lh "/home/runner/work/gemma-journey/gemma-journey/${ARCHIVE_NAME}.7z."*

      # Upload Artifact
      # This step might need adjustment if we only want to upload for releases,
      # or if the multi-volume parts are too numerous/large for typical artifact uploads.
      # For now, we'll attempt to upload all parts.
      - name: Upload Build Artifact (7z parts)
        uses: actions/upload-artifact@v4
        with:
          name: build-windows-7z-parts
          path: "/home/runner/work/gemma-journey/gemma-journey/windows-build.7z.*" # Ensure we use the correct path

      # Create Release and Upload
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v') # Only run for tags starting with 'v'
        uses: softprops/action-gh-release@v1
        with:
          files: "/home/runner/work/gemma-journey/gemma-journey/windows-build.7z.*" # Ensure we use the correct path
          body: |
            ## Windows Build (Multi-Volume 7-Zip Archive)

            This release is provided as a multi-volume 7-Zip archive due to its size.
            Please follow these instructions carefully:

            1. **Download ALL parts:**
               - `windows-build.7z.001`
               - `windows-build.7z.002`
               - `windows-build.7z.003` 
               - (and so on, if more parts are generated)
            2. **Place all downloaded parts in the SAME directory.**
            3. **Install 7-Zip:** If you don't have it, download and install 7-Zip from [https://www.7-zip.org/](https://www.7-zip.org/).
            4. **Extract:** Right-click on `windows-build.7z.001` and choose "7-Zip" -> "Extract Here" or "Extract to windows-build\\". 7-Zip will automatically find and use the other parts.

            **Note:** You must have all parts in the same folder for the extraction to succeed.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, no need to create it
